// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ROLE {
  ADMIN
  USER
  SUPERADMIN
}

model User {
  id         String  @id @default(cuid())
  email      String  @unique
  name       String?
  password   String?
  roles      ROLE[]  @default([USER])
  attributes Json?

  chats       ChatSession[]
  messages    Message[]
  sessionUser SessionUser[]
  isBlocked   Boolean @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([id])
  @@index([email])
}

model ChatSession {
  id         String    @id @default(cuid())
  name       String    @default("New Chat")
  archived   Boolean   @default(false)
  content    Content[]
  inviteCode String    @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String

  messages Message[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  SessionUser SessionUser[]

  @@index([id])
  @@index([inviteCode])
}

enum ContentType {
  TEXT
  WEB
  PDF
}

model Content {
  id          String      @id @default(cuid())
  contentUrl  String
  contentType ContentType @default(WEB)

  chatId      String
  chatSession ChatSession @relation(fields: [chatId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
  @@index([chatId])
}

enum MessagRole {
  USER
  BOT
}

model Message {
  id      String     @id @default(cuid())
  content String
  role    MessagRole @default(USER)

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  chat   ChatSession @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Access {
  READ
  READ_WRITE
  ADMIN
}

model SessionUser {
  id     String @id @default(cuid())
  access Access @default(READ)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, sessionId])
}
